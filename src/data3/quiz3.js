export const mysql3 = [
  {
    index: 1,
    question: "Кой архитектурен стил се характеризира с последователно предаване на данни между компоненти?",
    choices: [
      "Client-Server",
      "Repository",
      "Pipe-and-Filter",
      "Layered"
    ],
    correctAnswer: "Pipe-and-Filter",
    imageURL: null
  },
  {
    index: 2,
    question: "Кое НЕ е предимство на Pipe-and-Filter архитектурния стил?",
    choices: [
      "Интуитивен и лесен за разбиране",
      "Лесно имплементиране на паралелизъм",
      "Имплементиране на интерактивни приложения",
      "Филтрите могат да се третират като черни кутии"
    ],
    correctAnswer: "Имплементиране на интерактивни приложения",
    imageURL: null
  },
  {
    index: 3,
    question: "При кой вариант на Pipe-and-Filter стила обработката на данните може да започне веднага след получаване на първия байт?",
    choices: [
      "Batch-sequential",
      "Pipeline/stream",
      "Loopback",
      "Parallelism"
    ],
    correctAnswer: "Pipeline/stream",
    imageURL: null
  },
  {
    index: 4,
    question: "Каква е основната разлика между Repository и Blackboard вариантите на Shared-data стила?",
    choices: [
      "Repository поддържа повече данни",
      "Blackboard е активен агент и изпраща нотификации при промени",
      "Repository позволява повече компоненти",
      "Blackboard работи само с определен тип данни"
    ],
    correctAnswer: "Blackboard е активен агент и изпраща нотификации при промени",
    imageURL: null
  },
  {
    index: 5,
    question: "Кое е основно предимство на Shared-data архитектурния стил?",
    choices: [
      "Лесна имплементация в разпределена среда",
      "Ниска зависимост от централизираното хранилище",
      "Бърза промяна на модела на данните",
      "Висока ефективност при обмен на големи обеми данни",
    ],
    correctAnswer: "Висока ефективност при обмен на големи обеми данни",
    imageURL: null
  },
  {
    index: 6,
    question: "Какво представлява 'тънък клиент' в Client-server архитектурата?",
    choices: [
      "Клиент с минимални хардуерни изисквания",
      "Клиент, който имплементира само потребителския интерфейс",
      "Клиент с ограничен брой заявки",
      "Клиент без графичен интерфейс"
    ],
    correctAnswer: "Клиент, който имплементира само потребителския интерфейс",
    imageURL: null
  },
  {
    index: 7,
    question: "Кое е основно ограничение на Layered архитектурния стил?",
    choices: [
      "Невъзможност за комуникация между слоевете",
      "Прекалено сложна имплементация",
      "Строгите ограничения в комуникацията между слоевете влияят на производителността",
      "Липса на абстракция"
    ],
    correctAnswer: "Строгите ограничения в комуникацията между слоевете влияят на производителността",
    imageURL: null
  },
  {
    index: 8,
    question: "Кое НЕ е предимство на Implicit Invocation стила?",
    choices: [
      "Слаба обвързаност между компонентите",
      "Лесна проследимост на събитията",
      "Ясна структура на системата",
      "Лесна замяна на компоненти"
    ],
    correctAnswer: "Ясна структура на системата",
    imageURL: null
  },
  {
    index: 9,
    question: "Кой архитектурен стил е най-подходящ за системи, където обработката може лесно да се раздели на отделни, независими стъпки?",
    choices: [
      "Pipe-and-Filter",
      "Client-Server",
      "Repository",
      "Model-View-Controller"
    ],
    correctAnswer: "Pipe-and-Filter",
    imageURL: null
  },
  {
    index: 10,
    question: "Какво представлява 'дебел клиент' в Client-server архитектурата?",
    choices: [
      "Клиент с голям обем данни",
      "Клиент, който имплементира част от бизнес логиката",
      "Клиент с много потребители",
      "Клиент с разширен потребителски интерфейс"
    ],
    correctAnswer: "Клиент, който имплементира част от бизнес логиката",
    imageURL: null
  },
  {
    index: 11,
    question: "Кое е основно предизвикателство при имплементирането на Repository стила в разпределена среда?",
    choices: [
      "Поддържане на единен модел на данните",
      "Осигуряване на достатъчно дисково пространство",
      "Управление на потребителски права",
      "Създаване на потребителски интерфейс"
    ],
    correctAnswer: "Поддържане на единен модел на данните",
    imageURL: null
  },
  {
    index: 12,
    question: "Какво определят архитектурните стилове?",
    choices: [
      "Само компонентите в системата",
      "Само връзките между компонентите",
      "Речник на компоненти и конектори, както и ограничения за тяхното комбиниране",
      "Само изпълнителната семантика"
    ],
    correctAnswer: "Речник на компоненти и конектори, както и ограничения за тяхното комбиниране",
    imageURL: null
  },
  {
    index: 13,
    question: "Кое е основно предизвикателство при дебъгването на системи с Implicit Invocation стил?",
    choices: [
      "Големият размер на събитията",
      "Липсата на документация",
      "Сложността на компонентите",
      "Проследяване на последователността на изпълнение",
    ],
    correctAnswer: "Проследяване на последователността на изпълнение",
    imageURL: null
  },
  {
    index: 14,
    question: "В кой архитектурен стил компонентите трябва да знаят идентичността на другите компоненти, за да взаимодействат с тях?",
    choices: [
      "Pipe-and-Filter",
      "Object-Oriented",
      "Implicit Invocation",
      "Repository"
    ],
    correctAnswer: "Object-Oriented",
    imageURL: null
  },
  {
    index: 15,
    question: "Кое е основно предимство на използването на 'stub' слоеве в Layered архитектурата?",
    choices: [
      "Подобряване на производителността",
      "Улесняване на тестването",
      "Намаляване на броя слоеве",
      "Опростяване на интерфейсите"
    ],
    correctAnswer: "Улесняване на тестването",
    imageURL: null
  },
  {
    index: 16,
    question: "Какво представлява 'event bus' в контекста на Implicit Invocation стила?",
    choices: [
      "Хардуерен компонент",
      "База данни за събития",
      "Конектор за комуникация между компонентите",
      "Потребителски интерфейс"
    ],
    correctAnswer: "Конектор за комуникация между компонентите",
    imageURL: null
  },
  {
    index: 17,
    question: "Кое е основно предимство на трислойния Client-server модел спрямо двуслойния?",
    choices: [
      "По-ниска цена",
      "По-добра производителност и сигурност",
      "По-лесна имплементация",
      "По-малко изисквания към клиента"
    ],
    correctAnswer: "По-добра производителност и сигурност",
    imageURL: null
  },
  {
    index: 18,
    question: "Какво НЕ е типично за Repository архитектурния стил?",
    choices: [
      "Централизирано управление на данните",
      "Активно известяване на компонентите за промени",
      "Пасивно съхранение на данни",
      "Независимост на компонентите от източника на данни"
    ],
    correctAnswer: "Активно известяване на компонентите за промени",
    imageURL: null
  },
  {
    index: 19,
    question: "Кое е основно предизвикателство при имплементирането на Pipe-and-Filter в разпределена среда?",
    choices: [
      "Липса на документация",
      "Невъзможност за паралелна обработка",
      "Прекалено големи филтри",
      "Управление на сложността при комуникация между филтрите",
    ],
    correctAnswer: "Управление на сложността при комуникация между филтрите",
    imageURL: null
  },
  {
    index: 20,
    question: "Как най-често се прилагат архитектурните стилове в практиката?",
    choices: [
      "Самостоятелно, един стил за цялата система",
      "В комбинация от различни стилове според изискванията",
      "Само в теоретичен аспект",
      "Само за малки системи"
    ],
    correctAnswer: "В комбинация от различни стилове според изискванията",
    imageURL: null
  }

];
